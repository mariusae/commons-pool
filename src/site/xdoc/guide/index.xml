<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<document>

 <properties>
  <title>Developers Guide</title>
  <author email="dev@commons.apache.org">Commons Documentation Team</author>
 </properties>

 <body>

<section name="ObjectPool">
<center><img src="../images/uml/ObjectPool.gif"/></center>
<br/>
<p>
<a href="../apidocs/org/apache/commons/pool/ObjectPool.html">ObjectPool</a> defines a simple pooling interface.
<ul>
   <li>
       <a href="../apidocs/org/apache/commons/pool/impl/GenericObjectPool.html">GenericObjectPool</a>:
       ObjectPool implementation with configurable LIFO/FIFO behavior.
       The default behavior is for the pool to act as a LIFO queue. What this
       means is that when there are idle objects available in the pool, 
       borrowObject returns the most recently returned ("last in") instance.
       If the <code>lifo</code> the property of the pool false, instances are
       returned in the oppposite order - first-in, first-out.
   </li>
   <li>
       <a href="../apidocs/org/apache/commons/pool/impl/StackObjectPool.html">StackObjectPool</a>:
       ObjectPool implementation with a LIFO (Last In First Out) behavior.
   </li>
   <li>
       <a href="../apidocs/org/apache/commons/pool/impl/SoftReferenceObjectPool.html">SoftReferenceObjectPool</a>: 
       ObjectPool implementation with a LIFO (Last In First Out) behavior. Additionally this pool wraps 
       each object in a SoftReference allowing the garbage collector to remove them in response to 
       memory demand.
   </li>
</ul>
</p>
</section>

<section name="KeyedObjectPool">
<center><img src="../images/uml/KeyedObjectPool.gif"/></center>
<br/>
<p>
A <a href="../apidocs/org/apache/commons/pool/KeyedObjectPool.html">KeyedObjectPool</a>
pools instances of multiple types. Each type may be accessed using an arbitrary key.
<ul>
   <li>
       <a href="../apidocs/org/apache/commons/pool/impl/GenericKeyedObjectPool.html">GenericKeyedObjectPool</a>:
       ObjectPool implementation with a FIFO (First In First Out) behavior.
   </li>
   <li>
       <a href="../apidocs/org/apache/commons/pool/impl/StackKeyedObjectPool.html">StackKeyedObjectPool</a>:
       ObjectPool implementation with a LIFO (Last In First Out) behavior.
   </li>
</ul>
</p>
</section>

</body>
</document>
